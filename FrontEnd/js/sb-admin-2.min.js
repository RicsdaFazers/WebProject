/*
// método para registar a data e hora em que chegaram ao local
function horaChegadaLocal() {
  const id_ocorrencia = req.params.id_ocorrencia;
  var tempoChegada = new Date();
  const query = connect.con.query(
    "UPDATE ocorrencia SET tempo_deslocacao = ? WHERE id_ocorrencia = ?",
    id_ocorrencia,
    function (err, rows, fields) {
      tempoChegada = tempo_deslocacao;
      if (err) return res.status(500).end();
      res.send(rows);
    }
  );
}

//
const query = connect.con.query(
  'SELECT id_equipa, pontos_gamificacao FROM operacional WHERE id_operacional = ?', id_operacional,
  function(err, rows, fields) {
    if (err) return res.status(500).end();
    id_equipa = rows[0].id_equipa;
    pontos_gamificacao = rows[0].pontos_gamificacao;
//

// método para calcular o tempo real entre os dois (tempoInicioOcorrencia e horaChegadaLocal)
function tempoReal() {
  const id_ocorrencia = req.params.id_ocorrencia;
  const query = connect.con.query(
    "SELECT data_ocorrencia FROM ocorrencia WHERE id_ocorrencia = ?",
    id_ocorrencia,
    function(err,rows, fields){
      if (err) return res.status(500).end();

    }
  );
  const tempoDeslocacao = connect.con.query(
    "SELECT tempo_deslocacao FROM ocorrencia WHERE id_ocorrencia = ?",
    id_ocorrencia,
  );

  var t_real = Math.abs(dataOcorrencia - tempoDeslocacao);
  t_real = t_real * 0.00001 * 1.66666667;
  
  const tempoRealDeslocacao = connect.con.query(
    "UPDATE ocorrencia SET tempo_real_deslocacao = ? WHERE id_ocorrencia = ?",
    id_ocorrencia,
    function (err, rows, fields) {
      t_real = tempo_real_deslocacao;
      if (err) return res.status(500).end();
      res.send(t_real);
    }
  );
}

// método para calcular a diferença entre os dois (tempoReal e tempoEstimado)
function diferenca() {
  const id_ocorrencia = req.params.id_ocorrencia;
  const query = connect.con.query(
    "SELECT tempo_real_deslocacao FROM ocorrencia WHERE id_ocorrencia = ?",
    id_ocorrencia,

    "SELECT tempo_estimado FROM ocorrencia WHERE id_ocorrencia = ?",
    id_ocorrencia

  );
  var diff = Math.abs(tempo_real_deslocacao - tempo_estimado);
  diff = diff * 0.00001 * 1.66666667;
  if (err) return res.status(500).end();
  res.send(diff);
}
*/

//método do mapa
function myMap() {
  var mapProp = {
    center: new google.maps.LatLng(41.6946, -8.83016),
    zoom: 9,
  };
  var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
}

// Modal resetar password
$("#formPasse").on("submit", function (e) {
  $("#exampleModalCenter").modal("show");
  e.preventDefault();
});

// método para a lista de confirmar o material utilizado (No_Local)
$(function () {
  $(".hidden").hide();
  $(".trigger").change(function () {
    var hiddenId = $(this).attr("data-trigger");
    if ($(this).is(":checked")) {
      $("#" + hiddenId).show();
    } else {
      $("#" + hiddenId).hide();
    }
  });
});

// método para confirmar a presença
function myFunction() {
  document.getElementById("check-presenca").disabled = false;
}

// método para o carrossel
$(document).ready(function () {
  $("#form").on("input change", function () {
    $("#botao").attr("disabled", false);
  });
  $(".post-wrapper").slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 2000,
    nextArrow: $(".next"),
    prevArrow: $(".prev"),
    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 3,
          slidesToScroll: 3,
        },
      },
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  });
});

// métodos da template
!(function (s) {
  "use strict";
  s("#sidebarToggle, #sidebarToggleTop").on("click", function (e) {
    s("body").toggleClass("sidebar-toggled"),
      s(".sidebar").toggleClass("toggled"),
      s(".sidebar").hasClass("toggled") &&
        s(".sidebar .collapse").collapse("hide");
  }),
    s(window).resize(function () {
      s(window).width() < 768 && s(".sidebar .collapse").collapse("hide"),
        s(window).width() < 480 &&
          !s(".sidebar").hasClass("toggled") &&
          (s("body").addClass("sidebar-toggled"),
          s(".sidebar").addClass("toggled"),
          s(".sidebar .collapse").collapse("hide"));
    }),
    s("body.fixed-nav .sidebar").on(
      "mousewheel DOMMouseScroll wheel",
      function (e) {
        if (768 < s(window).width()) {
          var o = e.originalEvent,
            l = o.wheelDelta || -o.detail;
          (this.scrollTop += 30 * (l < 0 ? 1 : -1)), e.preventDefault();
        }
      }
    ),
    s(document).on("scroll", function () {
      100 < s(this).scrollTop()
        ? s(".scroll-to-top").fadeIn()
        : s(".scroll-to-top").fadeOut();
    }),
    s(document).on("click", "a.scroll-to-top", function (e) {
      var o = s(this);
      s("html, body")
        .stop()
        .animate(
          { scrollTop: s(o.attr("href")).offset().top },
          1e3,
          "easeInOutExpo"
        ),
        e.preventDefault();
    });
})(jQuery);
